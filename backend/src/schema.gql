# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateFarmInput {
  building: String
  city: String!
  name: String!
  ownerId: Int!
  postalCode: String!
  prefecture: String!
  restAddress: String!
}

input CreateOrderInput {
  farmId: Int!
  produceItems: [ProduceItemOrderInput!]!
}

input CreateProduceItemInput {
  farmId: Int!
  name: String!
}

input CreateShipmentInput {
  orderId: Int!
}

input CreateUserInput {
  email: String!
  firstName: String!
  lastName: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Farm {
  building: String
  city: String!
  createdAt: DateTime
  id: ID!
  name: String!
  orders: [Order!]!
  owner: User!
  postalCode: String!
  prefecture: String!
  produceItems: [ProduceItem!]!
  produceStocks: [ProduceStock!]!
  restAddress: String!
  updatedAt: DateTime
}

type Mutation {
  createFarm(createFarmInput: CreateFarmInput!): Farm!
  createOrder(createOrderInput: CreateOrderInput!): Order!
  createProduceItem(createProduceItemInput: CreateProduceItemInput!): ProduceItem!
  createShipment(createShipmentInput: CreateShipmentInput!): Shipment!
  createUser(createUserInput: CreateUserInput!): User!
  updateProduceStock(updateProduceStockInput: UpdateProduceStockInput!): ProduceStock!
  updateShipment(updateShipmentInput: UpdateShipmentInput!): Shipment!
}

type Order {
  buyer: User!
  buyerId: Int!
  createdAt: DateTime
  farm: Farm!
  farmId: Int!
  id: Int!
  orderDetails: [OrderDetail!]!
  orderedAt: DateTime!
  shipment: Shipment
  status: OrderStatus!
  updatedAt: DateTime
}

type OrderDetail {
  amount: Int!
  createdAt: DateTime
  id: Int!
  order: Order!
  orderId: Int!
  produceItem: ProduceItem!
  produceItemId: Int!
  updatedAt: DateTime
}

"""注文ステータス"""
enum OrderStatus {
  CANCELLED
  CONFIRMED
  DELIVERED
  PENDING
  SHIPPED
}

type ProduceItem {
  createdAt: DateTime
  farm: Farm!
  farmId: Int!
  id: Int!
  name: String!
  orderDetails: [OrderDetail!]!
  produceStock: ProduceStock!
  updatedAt: DateTime
}

input ProduceItemOrderInput {
  amount: Int!
  produceItemId: Int!
}

type ProduceStock {
  amount: Int!
  createdAt: DateTime
  farm: Farm!
  farmId: Int!
  id: Int!
  produceItem: ProduceItem!
  produceItemId: Int!
  updatedAt: DateTime
}

type Query {
  farm(id: Float!): Farm!
  farms: [Farm!]!
  users: [User!]!
}

"""ユーザーの権限"""
enum Role {
  Admin
  Buyer
  Farmer
}

type Shipment {
  createdAt: DateTime!
  deliveredAt: DateTime
  estimatedDeliveryDate: DateTime
  id: Int!
  order: Order!
  orderId: Int!
  shippedAt: DateTime
  status: ShipmentStatus!
  updatedAt: DateTime!
}

"""発送ステータス"""
enum ShipmentStatus {
  DELIVERED
  PENDING
  SHIPPED
}

input UpdateProduceStockInput {
  amount: Int!
  farmId: Int!
  id: Int!
}

input UpdateShipmentInput {
  id: Int!
  status: ShipmentStatus!
}

type User {
  createdAt: DateTime
  email: String!
  farms: [Farm!]
  firstName: String!
  id: ID!
  lastName: String!
  orders: [Order!]
  role: Role!
  updatedAt: DateTime
}